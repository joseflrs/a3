name: Refresh kernel 6.12 parts
on:
   workflow_dispatch:
jobs:
    build1:
        name: kernel part1
        runs-on: ubuntu-24.04-arm
        steps:
             - name: Setup Ubuntu
               run: |
                sudo apt update
                sudo apt install -y subversion build-essential gettext 2to3 python3-pyelftools python3-distutils-extra
             - name: checkout
               uses: actions/checkout@v4
             - name: refresh kernel              
               run: |
                git clone https://github.com/openwrt/openwrt.git
                git config --global user.email io@roton.me
                git config --global user.name 'J R'
                cp -rf .github/workflows/pm.patch openwrt/
                cp -rf .github/workflows/k-6.12.patch openwrt/
                cd openwrt
                git am pm.patch
                git apply k-6.12.patch
                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_airoha=y" > .config
                echo "CONFIG_TARGET_airoha_en7523=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make tools/quilt/compile -j$(nproc)
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_apm821xx=y" > .config
                echo "CONFIG_TARGET_apm821xx_nand=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_armsr=y" > .config
                echo "CONFIG_TARGET_armsr_armv8=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_at91=y" > .config
                echo "CONFIG_TARGET_at91_sam9x=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s


                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_ath79=y" > .config
                echo "CONFIG_TARGET_ath79_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_bcm27xx=y" > .config
                echo "CONFIG_TARGET_bcm27xx_bcm2712=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_bcm47xx=y" > .config
                echo "CONFIG_TARGET_bcm47xx_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_bcm4908=y" > .config
                echo "CONFIG_TARGET_bcm4908_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -rf build_dir/target*

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_bcm53xx=y" > .config
                echo "CONFIG_TARGET_bcm53xx_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_bmips=y" > .config
                echo "CONFIG_TARGET_bmips_bcm6368=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                git clean -d -f .
                rm -f *.patch
                git add .
                git commit -m "part1"
                git format-patch -1
                echo "D=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
             - name: Delete tag
               uses: ClementTsang/delete-tag-and-release@v0.4.0
               with:
                delete_release: true
                tag_name: part1
               env:
                 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             - name: Create release
               uses: ncipollo/release-action@v1.14.0
               with:
                allowUpdates: true
                name: Kernel part1 ${{ env.D }}
                tag: part1
                replacesArtifacts: true
                makeLatest: true
                token: "${{ secrets.GITHUB_TOKEN }}"
                artifacts: |
                          openwrt/*.patch

    build2:
        name: kernel part2
        runs-on: ubuntu-24.04-arm
        steps:
             - name: Setup Ubuntu
               run: |
                sudo apt update
                sudo apt install -y subversion build-essential gettext 2to3 python3-pyelftools python3-distutils-extra
             - name: checkout
               uses: actions/checkout@v4
             - name: refresh kernel
               run: |
                git clone https://github.com/openwrt/openwrt.git
                git config --global user.email io@roton.me
                git config --global user.name 'J R'
                cp -rf .github/workflows/pm.patch openwrt/
                cp -rf .github/workflows/k-6.12.patch openwrt/
                cd openwrt
                git am pm.patch
                git apply k-6.12.patch
                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_d1=y" > .config
                echo "CONFIG_TARGET_d1_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make tools/quilt/compile -j$(nproc)
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_gemini=y" > .config
                echo "CONFIG_TARGET_gemini_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_imx=y" > .config
                echo "CONFIG_TARGET_imx_cortexa53=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -rf build_dir/target*

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_ipq40xx=y" > .config
                echo "CONFIG_TARGET_ipq40xx_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_ipq806x=y" > .config
                echo "CONFIG_TARGET_ipq806x_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_ixp4xx=y" > .config
                echo "CONFIG_TARGET_ixp4xx_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_kirkwood=y" > .config
                echo "CONFIG_TARGET_kirkwood_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_lantiq=y" > .config
                echo "CONFIG_TARGET_lantiq_xway=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_layerscape=y" > .config
                echo "CONFIG_TARGET_layerscape_armv7=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                git clean -d -f .
                rm -f *.patch
                git add .
                git restore --staged target/linux/generic/*
                git commit -m "part2" || true
                git format-patch -1 || true
                echo "D=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
             - name: Delete tag
               uses: ClementTsang/delete-tag-and-release@v0.4.0
               with:
                delete_release: true
                tag_name: part2
               env:
                 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             - name: Create release
               uses: ncipollo/release-action@v1.14.0
               with:
                allowUpdates: true
                name: Kernel part2 ${{ env.D }}
                tag: part2
                replacesArtifacts: true
                makeLatest: true
                token: "${{ secrets.GITHUB_TOKEN }}"
                artifacts: |
                          openwrt/*.patch

    build3:
        name: kernel part3
        runs-on: ubuntu-24.04-arm
        steps:
             - name: Setup Ubuntu
               run: |
                sudo apt update
                sudo apt install -y subversion build-essential gettext 2to3 python3-pyelftools python3-distutils-extra
             - name: checkout
               uses: actions/checkout@v4
             - name: refresh kernel
               run: |
                git clone https://github.com/openwrt/openwrt.git
                git config --global user.email io@roton.me
                git config --global user.name 'J R'
                cp -rf .github/workflows/pm.patch openwrt/
                cp -rf .github/workflows/k-6.12.patch openwrt/
                cd openwrt
                git am pm.patch
                git apply k-6.12.patch
                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_loongarch64=y" > .config
                echo "CONFIG_TARGET_loongarch64_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make tools/quilt/compile -j$(nproc)
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_malta=y" > .config
                echo "CONFIG_TARGET_malta_be=y" >> .config
                echo "CONFIG_TARGET_malta_be_Default=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -rf build_dir/target*

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_mediatek=y" > .config
                echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_mpc85xx=y" > .config
                echo "CONFIG_TARGET_mpc85xx_p1010=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_mvebu=y" > .config
                echo "CONFIG_TARGET_mvebu_cortexa53=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_mxs=y" > .config
                echo "CONFIG_TARGET_mxs_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_octeon=y" > .config
                echo "CONFIG_TARGET_octeon_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_omap=y" > .config
                echo "CONFIG_TARGET_omap_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -rf build_dir/target*

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_pistachio=y" > .config
                echo "CONFIG_TARGET_pistachio_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_qoriq=y" > .config
                echo "CONFIG_TARGET_qoriq_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_qualcommax=y" > .config
                echo "CONFIG_TARGET_qualcommax_ipq807x=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                git clean -d -f .
                rm -f *.patch
                git add .
                git restore --staged target/linux/generic/*
                git commit -m "part3" || true
                git format-patch -1 || true
                echo "D=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
             - name: Delete tag
               uses: ClementTsang/delete-tag-and-release@v0.4.0
               with:
                delete_release: true
                tag_name: part3
               env:
                 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             - name: Create release
               uses: ncipollo/release-action@v1.14.0
               with:
                allowUpdates: true
                name: Kernel part3 ${{ env.D }}
                tag: part3
                replacesArtifacts: true
                makeLatest: true
                token: "${{ secrets.GITHUB_TOKEN }}"
                artifacts: |
                          openwrt/*.patch

    build4:
        name: kernel part4
        runs-on: ubuntu-24.04-arm
        steps:
             - name: Setup Ubuntu
               run: |
                sudo apt update
                sudo apt install -y subversion build-essential gettext 2to3 python3-pyelftools python3-distutils-extra
             - name: checkout
               uses: actions/checkout@v4
             - name: refresh kernel
               run: |
                git clone https://github.com/openwrt/openwrt.git
                git config --global user.email io@roton.me
                git config --global user.name 'J R'
                cp -rf .github/workflows/pm.patch openwrt/
                cp -rf .github/workflows/k-6.12.patch openwrt/
                cd openwrt
                git am pm.patch
                git apply k-6.12.patch
                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_ramips=y" > .config
                echo "CONFIG_TARGET_ramips_mt7620=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make tools/quilt/compile -j$(nproc)
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_realtek=y" > .config
                echo "CONFIG_TARGET_realtek_rtl838x=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_rockchip=y" > .config
                echo "CONFIG_TARGET_rockchip_armv8=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_sifiveu=y" > .config
                echo "CONFIG_TARGET_sifiveu_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -rf build_dir/target*

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_siflower=y" > .config
                echo "CONFIG_TARGET_siflower_sf21=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_starfive=y" > .config
                echo "CONFIG_TARGET_starfive_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_stm32=y" > .config
                echo "CONFIG_TARGET_stm32_stm32mp1=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_sunxi=y" > .config
                echo "CONFIG_TARGET_sunxi_cortexa53=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -rf build_dir/target*

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_tegra=y" > .config
                echo "CONFIG_TARGET_tegra_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_x86=y" > .config
                echo "CONFIG_TARGET_x86_64=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_zynq=y" > .config
                echo "CONFIG_TARGET_zynq_generic=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                rm -f .config
                rm -rf tmp
                echo "CONFIG_TARGET_qualcommbe=y" > .config
                echo "CONFIG_TARGET_qualcommbe_ipq95xx=y" >> .config
                echo "CONFIG_ALL_KMODS=y" >> .config
                echo "CONFIG_EXPERIMENTAL=y" >> .config
                make defconfig
                make target/linux/{clean,refresh} -j$(nproc) V=s

                git clean -d -f .
                rm -f *.patch
                git add .
                git restore --staged target/linux/generic/*
                git commit -m "part4" || true
                git format-patch -1 || true
                echo "D=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
             - name: Delete tag
               uses: ClementTsang/delete-tag-and-release@v0.4.0
               with:
                delete_release: true
                tag_name: part4
               env:
                 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             - name: Create release
               uses: ncipollo/release-action@v1.14.0
               with:
                allowUpdates: true
                name: part4 ${{ env.D }}
                tag: part4
                replacesArtifacts: true
                makeLatest: true
                token: "${{ secrets.GITHUB_TOKEN }}"
                artifacts: |
                          openwrt/*.patch
